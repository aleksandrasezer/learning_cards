{"version":3,"sources":["n1-main/m1-ui/superComponents/Loader/Loader.module.css","n1-main/m1-ui/components/Error404.tsx","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.tsx","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/app-reducer.ts","n1-main/m2-bll/auth-reducer.ts","n1-main/m1-ui/components/Login/Login.tsx","n1-main/m1-ui/components/Profile/Profile.tsx","n1-main/m2-bll/registration-reducer.ts","n1-main/m1-ui/components/Registration/Register.tsx","n1-main/m2-bll/setNewPassword-reducer.ts","n1-main/m1-ui/components/NewPassword.tsx","n1-main/m2-bll/recoverPassword-reducer.ts","n1-main/m1-ui/components/ForgotPassword.tsx","n1-main/m2-bll/packs-reducer.ts","n1-main/m1-ui/components/Modal/ModalPacks/ModalForPacks.tsx","n1-main/m1-ui/components/Modal/ModalDelete/ModalDeleteItem.tsx","n1-main/m1-ui/common/LightToolTip.tsx","n1-main/m1-ui/components/Packs/Pack/Pack.tsx","n1-main/m1-ui/components/Packs/Packs.tsx","n1-main/m1-ui/components/Modal/ModalCards/ModalForCards.tsx","n1-main/m1-ui/components/Cards/Card/Card.tsx","n1-main/m2-bll/cards-reducer.ts","n1-main/m1-ui/components/Cards/Cards.tsx","n1-main/m1-ui/superComponents/Loader/Loader.tsx","n1-main/m1-ui/components/Learn/Learn.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/Main.tsx","App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/components/Modal/Modal.module.css","n1-main/m1-ui/components/Packs/Packs.module.css","n1-main/m1-ui/common/styles.module.css","n1-main/m1-ui/components/Packs/Pack/Pack.module.css","n1-main/m1-ui/components/Cards/Card/Card.module.css","n1-main/m1-ui/components/Learn/Learn.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/components/Login/Login.module.css","n1-main/m1-ui/components/Cards/Cards.module.css"],"names":["module","exports","Error404","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","superInput","errorInput","value","key","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","registerAPI","recoverPasswordAPI","message","resetPasswordToken","packsAPI","pageCount","currentPage","packName","minCardsCount","maxCardsCount","userId","sortPacks","get","data","cardsPack","id","packId","newPackName","put","_id","name","cardsAPI","cardsPack_id","page","sortCards","params","card","updateCardData","question","answer","card_id","grade","initialState","status","isInitialized","setAppStatusAC","setIsInitializedAC","userData","avatar","created","isAdmin","publicCardPacksCount","token","tokenDeathTime","updated","verified","__v","isLoggedIn","authError","setIsLoggedInAC","logoutTC","dispatch","then","Login","useDispatch","useSelector","state","auth","authErrorMessage","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","res","catch","response","errorMessage","loginTC","resetForm","to","bgr","handleSubmit","form","placeholder","touched","getFieldProps","style","free","color","Profile","userName","myPacksCount","nameOnDisplay","isRegistered","Register","register","confirmedPassword","length","alert","registerTC","isNewPassword","NewPassword","newPasswordSet","setNewPassword","useParams","confirmPassword","recoveredPassword","ForgotPassword","forgotPassword","recoverPasswordTC","Message","props","cardPacks","totalPacksCount","pageSize","setUserIdAC","setNameAC","setSortPacksAC","sortValue","getPacksTC","getState","packs","totalPacks","cardPacksTotalCount","console","log","ModalForPacks","useState","titlePack","newText","setNewText","wrapperModal","onClick","closeAddEditPackModal","modal","stopPropagation","buttonBlock","addNewPack","ModalDeleteItem","closeDeleteModal","title","deleteItem","LightTooltip","withStyles","theme","tooltip","backgroundColor","palette","common","white","boxShadow","shadows","fontSize","Tooltip","Pack","React","memo","updateTime","Date","toLocaleDateString","editPackModal","setEditPackModal","deletePackModal","setDeletePackModal","packItem","packSpecification","user_name","cardsCount","cardsLink","cursor","user_id","currentUserId","green","updatePack","delPack","Packs","searchText","setSearchText","useEffect","addPackModal","setAddPackModal","useCallback","delPackTC","updatePackTC","sortPacksByUpdate","myPacks","setMyPacks","activeMyPacksButton","st","activeButton","activeAllPacksButton","search","pages","pagesCount","Math","ceil","i","push","mappedPacks","map","p","packsContainer","packsField","packContents","sidebar","showMyAllPacks","filterByCardsCount","Slider","margin","padding","onChangeCommitted","event","newValue","Array","setMinCardsCountAC","setMaxCardsCountAC","valueLabelDisplay","aria-labelledby","min","max","paginator","Pagination","count","boundaryCount","defaultPage","pageNumber","onPageChangedHandler","ModalForCards","questionValue","setQuestion","answerValue","addQuestion","closeAddEditCardModal","questionPlaceholder","answerPlaceholder","addNewCard","Card","update","editCardModal","setEditCardsModal","deleteCardModal","setDeleteCardModal","cardItem","cardSpecification","updateCard","delCard","cards","packUserId","cardsTotalCount","minGrade","maxGrade","setSortCardsAC","setPageCountAC","getCardsTC","totalCards","Cards","packID","addCardModal","setAddCardsModal","delCardTC","err","updateCardTC","sortCardsByGrade","mappedCards","c","cardContents","setCardsCurrentPageAC","Loader","ldsCircle","Learn","app","currentQuestion","setAnswer","stop","setStop","setGrade","goToPacks","startOver","qOver","disabled","options","el","ButtonGroup","variant","aria-label","Button","cardId","sendGradeTC","PATH","Routes","path","exact","render","Header","wrapper","link","activeClassName","active","ExitToApp","paddingLeft","Main","finally","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ae1da37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__jDpB7\"};","import React from 'react'\n\nexport const  Error404 = () => {\n    return (\n        <div>\n            <div>404</div>\n            <div>Page not found!</div>\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    )\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string | null\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    // const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : ''} ${className}` // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import axios from \"axios\";\n\nexport const instance = axios.create(\n    {\n        baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n        withCredentials: true,\n    })\n\nexport const authAPI = {\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post('auth/login', {email, password, rememberMe})\n    },\n    logout() {\n        return instance.delete('auth/me')\n    },\n    me() {\n        return instance.post('auth/me')\n    },\n}\n\nexport const registerAPI = {\n    register(email: string, password: string) {\n        return instance.post('/auth/register', {email, password})\n    }\n}\n\nexport const recoverPasswordAPI = {\n    recoverPassword(email: string, message: string) {\n        return instance.post('/auth/forgot', {email, message})\n    },\n    setNewPassword(password: string, resetPasswordToken: string) {\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\n    }\n}\n\nexport const packsAPI = {\n    getPacks(pageCount: number, currentPage: number, packName: string, minCardsCount: number,\n             maxCardsCount: number, userId: string, sortPacks: string) {\n        return instance\n            .get(`/cards/pack?pageCount=${pageCount}&sortPacks=${sortPacks}&packName=${packName}&page=${currentPage}&min=${minCardsCount}&max=${maxCardsCount}&user_id=${userId}`)\n    },\n    addPack(data: AddPackRequestDataType) {\n        return instance.post('/cards/pack', {cardsPack: data})\n    },\n    deletePack(id: string) {\n        return instance.delete(`/cards/pack?id=${id}`)\n    },\n    updatePack(packId: string, newPackName: string) {\n        return instance.put('/cards/pack', {\n            cardsPack: {_id: packId, name: newPackName}\n        })\n    },\n}\n\nexport const cardsAPI = {\n    getCards(cardsPack_id: string, page: number, pageCount: number, sortCards: string) {\n        return instance.get(`/cards/card`, {\n            params: {\n                cardsPack_id: cardsPack_id,\n                pageCount: pageCount,\n                page: page,\n                sortCards: sortCards,\n            }\n        })\n    },\n    addCard(data: CreateCardRequestDataType) {\n        return instance.post('/cards/card', {card: data})\n    },\n    deleteCard(cardsPack_id: string) {\n        return instance.delete(`/cards/card?id=${cardsPack_id}`)\n    },\n    updateCard(updateCardData: updateCardDataType) {\n        return instance.put('cards/card', {\n            card: {\n                _id: updateCardData._id,\n                question: updateCardData.question,\n                answer: updateCardData.answer,\n            }\n        })\n    },\n    sendGrade(card_id: string, grade: number) {\n        return instance.put('/cards/grade', {\n            grade: grade,\n            card_id: card_id\n        })\n    }\n}\n\n\n//types\nexport type updateCardDataType = {\n    _id: string,\n    question: string,\n    answer: string\n}\n\nexport type CreateCardRequestDataType = {\n    cardsPack_id: string\n    question?: string\n    answer?: string\n    grade?: number\n    shots?: number\n    type?: string\n}\n\nexport type AddPackRequestDataType = {\n    name?: string\n    private?: boolean\n}","import {AppThunkType} from \"./store\";\nimport {setIsLoggedInAC} from \"./auth-reducer\";\nimport {authAPI} from \"../m3-dal/api\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    isInitialized: false,\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-IS-INITIALIZED':\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return state\n    }\n}\n\n//action creators\nexport const setAppStatusAC = (status: RequestStatusType) => ({\n    type: 'APP/SET-STATUS',\n    status\n} as const)\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\n    type: 'APP/SET-IS-INITIALIZED',\n    isInitialized\n} as const)\n\n//thunk\nexport const setIsInitializedTC = (): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC(\"loading\"))\n    authAPI.me()\n        .then((res) => {\n            dispatch(setIsInitializedAC(true))\n            dispatch(setIsLoggedInAC(true,res.data))\n            dispatch(setAppStatusAC(\"succeeded\"))\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC(\"failed\"))\n        })\n        .finally(() => {\n            dispatch(setIsInitializedAC(true))\n        })\n}\n\n//types\nexport type AppActionsType = ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setIsLoggedInAC>\n    | ReturnType<typeof setIsInitializedAC>\n\n\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../m3-dal/api\";\nimport {setAppStatusAC} from \"./app-reducer\";\n\n\nconst initialState = {\n    userData: {\n        avatar: '',\n        created: '',\n        email: '',\n        isAdmin: false,\n        name: '',\n        publicCardPacksCount: 0,\n        rememberMe: false,\n        token: '',\n        tokenDeathTime: 0,\n        updated: '',\n        verified: false,\n        __v: 0,\n        _id: '',\n    } || null,\n    isLoggedIn: false,\n    authError: '',\n};\n\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, userData: action.userData, isLoggedIn: action.value}\n        case 'login/SET-IS-LOGGED-OUT':\n            return {...state, isLoggedIn: action.value}\n        case 'login/SET-AUTH-ERROR':\n            return {...state, authError: action.errorMessage}\n        default:\n            return state\n    }\n};\n\n//actions\nexport const setIsLoggedInAC = (value: boolean, userData: UserDataResponseType) => ({\n    type: 'login/SET-IS-LOGGED-IN', value, userData\n} as const)\nexport const setIsLoggedOutAC = (value: boolean) => ({\n    type: 'login/SET-IS-LOGGED-OUT', value\n} as const)\n\nconst setAuthErrorAC = (errorMessage: string) => ({\n    type: 'login/SET-AUTH-ERROR', errorMessage\n} as const)\n\n//thunks\nexport const loginTC = (values: UserLoginData) => (dispatch: Dispatch<ActionsType>) => {\n\n    dispatch(setAppStatusAC('loading'))\n\n    authAPI.login(values.email, values.password, values.rememberMe)\n        .then((res) => {\n            dispatch(setIsLoggedInAC(true, res.data))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch((e) => {\n            const error = e.response ? e.response.data.error : e.message\n            dispatch(setAuthErrorAC(error))\n            dispatch(setAppStatusAC('failed'))\n\n        })\n}\n\nexport const logoutTC = (dispatch: Dispatch<ActionsType>) => {\n    try {\n        authAPI.logout().then(() => {\n            dispatch(setIsLoggedOutAC(false))\n        })\n    } catch (e) {\n\n    }\n}\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\n    | ReturnType<typeof setIsLoggedOutAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAuthErrorAC>\n\n\nexport type UserLoginData = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport type UserDataResponseType = {\n    avatar: string\n    created: string\n    email: string\n    isAdmin: boolean\n    name: string\n    publicCardPacksCount: number\n    rememberMe: boolean\n    token: string\n    tokenDeathTime: number\n    updated: string\n    verified: boolean\n    __v: number\n    _id: string\n}","import React from 'react'\nimport s from '../../common/styles.module.css'\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../../m2-bll/auth-reducer\";\nimport {useFormik} from 'formik';\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {AppStoreType} from \"../../../m2-bll/store\";\nimport style from './Login.module.css'\n\ntype LoginErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\n    const authErrorMessage = useSelector((state: AppStoreType) => state.auth.authError)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n        },\n        validate: (values) => {\n            const errors: LoginErrorType = {};\n            if (!values.email) {\n                errors.email = 'Email is required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Password is required';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    });\n\n    if (isLoggedIn) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={s.bgr}>\n            <h2> Login </h2>\n\n            <form onSubmit={formik.handleSubmit} className={s.form}>\n\n                <SuperInputText\n                    type='email'\n                    placeholder='E-mail'\n                    error={formik.touched.email ? formik.errors.email : null}\n                    {...formik.getFieldProps('email')}\n                />\n\n                <SuperInputText\n                    type='password'\n                    placeholder='Password'\n                    error={formik.touched.password ? formik.errors.password : null}\n                    {...formik.getFieldProps('password')}\n                />\n\n                <br/>\n\n                <div>\n                    <SuperCheckbox {...formik.getFieldProps('rememberMe')}/>\n                    Remember me\n                </div>\n\n                <div className={style.authError}>\n                    {authErrorMessage}\n                </div>\n\n                <SuperButton type='submit'>\n                    Login\n                </SuperButton>\n            </form>\n\n            <NavLink to='/forgot-password'>Forgot Password</NavLink> <br/>\n            <NavLink to=\"/register\">Sign Up</NavLink>\n\n            <br/>\n            <br/>\n            <div className={style.free}>\n                To log in for test use <br/>common test account credentials: <br/>\n                Email: <span style={{color: 'black'}}>eto4ka@gmail.com</span> <br/>\n                Password: <span style={{color: 'black'}}>1234qwerty</span>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport {useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/store\";\nimport {Login} from \"../Login/Login\";\n\nexport const  Profile = () => {\n\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\n    const userName = useSelector((state: AppStoreType) => state.auth.userData?.name)\n    const myPacksCount = useSelector((state: AppStoreType) => state.auth.userData?.publicCardPacksCount)\n\n    let nameOnDisplay = userName ?? 'Stranger'\n\n    if (!isLoggedIn) {\n        return <Login />\n    }\n\n    return (\n        <div>\n            <div>\n                <h2>Hello, {nameOnDisplay}!</h2>\n                <h3>You have {myPacksCount} packs</h3>\n            </div>\n        </div>\n    )\n}","import {registerAPI} from \"../m3-dal/api\";\nimport {Dispatch} from \"redux\";\nimport {setAppStatusAC} from \"./app-reducer\";\n\nconst initialState = {\n    isRegistered: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const registerReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"register/SET-SIGN-UP\":\n            return {...state, isRegistered: action.isRegistered}\n        default:\n            return state\n    }\n}\n\n//actions\nexport const setSignUpAC = (isRegistered: boolean) => ({\n    type: 'register/SET-SIGN-UP',\n    isRegistered\n} as const)\n\n//thunks\nexport const registerTC = (values: UserLoginData) => {\n    return (dispatch: Dispatch<ActionsType>) =>  {\n        dispatch(setAppStatusAC('loading'))\n        registerAPI.register(values.email, values.password)\n            .then(() => {\n                dispatch(setSignUpAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n            .catch((e) => {\n                const error = e.response ? e.response.data.error : e.message\n                alert(error)\n            })\n    }\n}\n\n\n//types\ntype ActionsType = ReturnType<typeof setSignUpAC> | ReturnType<typeof setAppStatusAC>\ntype UserLoginData = {\n    email: string\n    password: string\n}","import React from 'react'\nimport s from '../../common/styles.module.css'\nimport {useFormik} from 'formik';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/store\";\nimport {registerTC} from \"../../../m2-bll/registration-reducer\";\n\ntype SignupFormErrorType = {\n    email?: string\n    password?: string\n    confirmedPassword?: string\n}\nexport const Register = () => {\n    const dispatch = useDispatch()\n    const isRegistered = useSelector((state: AppStoreType) => state.register.isRegistered)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmedPassword: '',\n        },\n        validate: (values) => {\n            const errors: SignupFormErrorType = {};\n            if (!values.email) {\n                errors.email = 'Email is required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address.';\n            }\n            if (!values.password) {\n                errors.password = 'Password is required'\n            } else if (values.password.length < 8) {\n                errors.password = 'Password must be at least 8 symbols'\n            }\n            if (values.password && !values.confirmedPassword) {\n                errors.confirmedPassword = 'Confirm your password'\n            } else if (values.password !== values.confirmedPassword) {\n                errors.confirmedPassword = 'You entered two different passwords.'\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            if (values.password === values.confirmedPassword) {\n                dispatch(registerTC(values))\n                formik.resetForm()\n            }\n        },\n    })\n\n    if(isRegistered) {\n        return <Redirect to={'./login'}/>\n    }\n\n    return (\n        <div className={s.bgr}>\n            <h1>it-incubator</h1>\n            <h2>Sign In</h2>\n            <form onSubmit={formik.handleSubmit} className={s.form}>\n\n                <SuperInputText\n                    type='email'\n                    placeholder='Email'\n                    error={formik.touched.email ? formik.errors.email : null}\n                    {...formik.getFieldProps('email')}\n                />\n\n                <SuperInputText\n                    type='password'\n                    placeholder='Password'\n                    error={formik.touched.password ? formik.errors.password : null}\n                    {...formik.getFieldProps('password')}\n                    //formik.getFieldProps вместо этого:\n                    // name='password'\n                    // onChange={formik.handleChange}\n                    // value={formik.values.password}\n                />\n\n                <SuperInputText\n                    type='password'\n                    placeholder='Confirm your password'\n                    error={formik.touched.confirmedPassword ? formik.errors.confirmedPassword : null}\n                    {...formik.getFieldProps('confirmedPassword')}\n                />\n                <div>\n                    <NavLink to='/login'><SuperButton> Cancel </SuperButton></NavLink>\n                    <SuperButton type={'submit'}> Register </SuperButton>\n                </div>\n\n            </form>\n        </div>\n    )\n}","import {setAppStatusAC} from \"./app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\n\nconst initialState = {\n  isNewPassword: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n    case 'setNewPassword/SET-NEW-PASSWORD':\n      return {...state, isNewPassword: true}\n    default:\n      return state\n  }\n}\n\n// AC\nconst setNewPasswordAC = () => ({\n  type: 'setNewPassword/SET-NEW-PASSWORD'\n} as const)\n\n\n// Thunk\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    recoverPasswordAPI.setNewPassword(password, resetPasswordToken)\n    .then(() => {\n      dispatch(setNewPasswordAC())\n      dispatch(setAppStatusAC('succeeded'))\n    })\n    .catch((e) => {\n      const error = e.response ? e.response.data.error : e.message\n      alert(error)\n    })\n  }\n}\n\n// Type\ntype ActionsType = ReturnType<typeof setNewPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\nimport s from '../common/styles.module.css'\nimport SuperInputText from \"../superComponents/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\nimport {useFormik} from \"formik\";\nimport {setNewPasswordTC} from \"../../m2-bll/setNewPassword-reducer\";\nimport {Redirect, useParams} from 'react-router-dom';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../m2-bll/store\";\n\ntype SetNewPassErrorType = {\n  password?: string\n  confirmPassword?: string\n}\n\nexport const  NewPassword = () => {\n  const dispatch = useDispatch()\n  const newPasswordSet = useSelector((state: AppStoreType) => state.setNewPassword.isNewPassword)\n  const {token} = useParams<{ token: string }>()\n\n\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      confirmPassword: ''\n    },\n    validate: (values) => {\n      // debugger\n      const errors: SetNewPassErrorType = {};\n      if (!values.password) {\n        errors.password = 'Password is required'\n      } else if (values.password.length < 8) {\n        errors.password = 'Password must be at least 8 symbols'\n      }\n      if (values.password && !values.confirmPassword) {\n        errors.confirmPassword = 'Confirm your password'\n      } else if (values.password !== values.confirmPassword) {\n        errors.confirmPassword = 'You entered two different passwords.'\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      // debugger\n      if (values.password === values.confirmPassword) {\n        dispatch(setNewPasswordTC(values.confirmPassword, token))\n        formik.resetForm()\n      }\n      // dispatch(setNewPasswordTC(values.password, token))\n    },\n  });\n\n  if (newPasswordSet) {\n    return <Redirect to={'/login'}/>\n  }\n\n    return (\n        <div>\n            <div className={s.bgr}>\n              <h1>it-incubator</h1>\n              <h2>Set new password</h2>\n              <form onSubmit={formik.handleSubmit} className={s.form}>\n                <SuperInputText\n                  type='password'\n                  placeholder='New password'\n                  error={formik.touched.password ? formik.errors.password : null}\n                  {...formik.getFieldProps('password')}\n                />\n                <SuperInputText\n                  type='password'\n                  placeholder='Confirm your new password'\n                  error={formik.touched.confirmPassword ? formik.errors.confirmPassword : null}\n                  {...formik.getFieldProps('confirmPassword')}\n                />\n                <SuperButton type={'submit'}>Set new password</SuperButton>\n              </form>\n            </div>\n        </div>\n    )\n}","import {Dispatch} from \"redux\";\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\nimport {setAppStatusAC} from \"./app-reducer\";\n\nconst initialState = {\n    recoveredPassword: false\n};\n\ntype InitialStateType = typeof initialState\n\nexport const recoverPasswordReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case 'recoverPassword/CHANGE-PASSWORD':\n            return {...state, recoveredPassword: true}\n        default:\n            return state\n    }\n}\n\n//actions\nexport const recoverPasswordAC = () => ({\n    type: 'recoverPassword/CHANGE-PASSWORD'\n} as const)\n\n//thunks\nexport const recoverPasswordTC = (email: string, message: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        recoverPasswordAPI.recoverPassword(email, message)\n            .then(() => {\n                dispatch(recoverPasswordAC())\n                dispatch(setAppStatusAC('succeeded'))\n            })\n            .catch((e) => {\n                const error = e.response ? e.response.data.error : e.message\n                alert(error)\n            })\n    }\n}\n// types\ntype ActionsType = ReturnType<typeof recoverPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\nimport s from '../common/styles.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {recoverPasswordTC} from \"../../m2-bll/recoverPassword-reducer\";\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\nimport {useFormik} from \"formik\";\nimport SuperInputText from \"../superComponents/c1-SuperInputText/SuperInputText\";\nimport {AppStoreType} from '../../m2-bll/store';\n\nexport type RecoveryFormikErrorType = {\n    email?: string\n}\nexport const ForgotPassword = () => {\n    const dispatch = useDispatch()\n    const recoveredPassword = useSelector((state: AppStoreType) => state.forgotPassword.recoveredPassword)\n\n\n    const message = `<div style=\"background-color: lime; padding: 15px\">\n            password recovery link:\t<a href='https://Peleka.github.io/cards-game/#/new-password/$token$'>link</a>\n            </div>`\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        validate: (values) => {\n            const errors: RecoveryFormikErrorType = {};\n            if (!values.email) {\n                errors.email = \"Email is required\"\n            } else if (values.email.length < 11) {\n                errors.email = \"Email should be more 10 symbols\"\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(recoverPasswordTC(values.email, message))\n        },\n    })\n\n    return (\n        <div className={s.bgr}>\n            <h1>it-incubator</h1>\n            <h2>Forgot your password?</h2>\n            {!recoveredPassword\n                ? <div>\n                    <form onSubmit={formik.handleSubmit}>\n                        <SuperInputText type='email'\n                                        placeholder='Email'\n                                        {...formik.getFieldProps('email')}\n                        />\n                        <SuperButton type={'submit'}>Send instructions</SuperButton>\n                    </form>\n                </div>\n                : <Message email={formik.values.email}/>\n            }\n        </div>\n    )\n}\n\n\ntype MessagePropsType = {\n    email: string\n}\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div>\n            <h4>Check your Email</h4>\n            <span>\n                click the link in the message in your email {props.email}\n            </span>\n        </div>\n    )\n}","import {AddPackRequestDataType, packsAPI} from \"../m3-dal/api\";\nimport {setAppStatusAC} from \"./app-reducer\";\nimport {AppThunkType} from \"./store\";\n\nconst initialState = {\n    cardPacks: null as null | PackResponseType[],\n    maxCardsCount: 6,\n    minCardsCount: 0,\n    pageCount: 8,\n    packId: '',\n    name: '',\n    totalPacksCount: 0,\n    pageSize: 10,\n    currentPage: 1,\n    userId: '',\n    sortPacks: '0updated' as SortPacksOptions,\n}\ntype SortPacksOptions = '0updated' | '1updated'\n\ntype InitialStateType = typeof initialState\n\nexport const packsReducer = (state = initialState, action: PacksActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'PACKS/SET-PACKS':\n            return {...state, cardPacks: action.data}\n        case 'SET-TOTAL-PACKS-COUNT':\n            return {...state, totalPacksCount: action.totalPacks}\n        case 'SET-CURRENT-PAGE':\n            return {...state, currentPage: action.pageNumber}\n        case 'PACKS/DEL-PACK':\n            return state\n        case 'PACKS/UPDATE-PACK':\n            return state\n        case 'PACKS/SET-USER-ID':\n            return {...state, userId: action.userId}\n        case 'PACKS/SET-MIN-CARDS_COUNT':\n            return {...state, minCardsCount: action.minCardsCount}\n        case \"PACKS/SET-MAX-CARDS_COUNT\":\n            return {...state, maxCardsCount: action.maxCardsCount}\n        case \"PACKS/SET-NAME\":\n            return {...state, name: action.name}\n        case \"PACKS/SET-SORT\":\n            return {...state, sortPacks: action.sortValue}\n        default:\n            return state\n    }\n}\n\n//action creators\nexport const setMinCardsCountAC = (minCardsCount: number) => ({type: 'PACKS/SET-MIN-CARDS_COUNT', minCardsCount,\n} as const)\nexport const setMaxCardsCountAC = (maxCardsCount: number) => ({type: 'PACKS/SET-MAX-CARDS_COUNT', maxCardsCount,\n} as const)\n\nexport const setPacksAC = (data: PackResponseType[]) => ({type: 'PACKS/SET-PACKS', data,} as const)\nconst setTotalPacksCountAC = (totalPacks: number) => ({type: 'SET-TOTAL-PACKS-COUNT', totalPacks,} as const)\nexport const setCurrentPageAC = (pageNumber: number) => ({type: 'SET-CURRENT-PAGE', pageNumber,} as const)\nexport const delPackAC = (id: string) => ({type: 'PACKS/DEL-PACK', id} as const)\nexport const updatePackAC = (data: UpdatePacksRequestDataType) => ({type: 'PACKS/UPDATE-PACK', data} as const)\nexport const setUserIdAC = (userId: string) => ({type: 'PACKS/SET-USER-ID', userId} as const)\nexport const setNameAC = (name: string) => ({type: 'PACKS/SET-NAME', name} as const)\nexport const setSortPacksAC = (sortValue: SortPacksOptions) => ({type: 'PACKS/SET-SORT', sortValue} as const)\n\n\n//thunk\nexport const getPacksTC = (): AppThunkType => (dispatch, getState) => {\n    // debugger\n    dispatch(setAppStatusAC('loading'))\n    const state = getState()\n    const currentPage = state.packs.currentPage\n    const packName = state.packs.name\n    const minCardsCount = state.packs.minCardsCount\n    const maxCardsCount = state.packs.maxCardsCount\n    const userId = state.packs.userId\n    const pageCount = state.packs.pageCount\n    const sortPacks = state.packs.sortPacks\n\n    packsAPI.getPacks(pageCount, currentPage, packName, minCardsCount, maxCardsCount, userId, sortPacks)\n        .then(res => {\n            dispatch(setTotalPacksCountAC(res.data.cardPacksTotalCount))\n            dispatch(setPacksAC(res.data.cardPacks))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC('failed'))\n            console.log('get packs error')\n        })\n}\n\nexport const addPackTC = (data: AddPackRequestDataType): AppThunkType => (dispatch) => {\n    dispatch(setAppStatusAC('loading'))\n    packsAPI.addPack(data)\n        .then(() => {\n            dispatch(getPacksTC())\n            console.log('pack added successfully')\n            dispatch(setAppStatusAC(\"succeeded\"))\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC('failed'))\n            console.log('add pack error')\n        })\n}\n\nexport const delPackTC = (id: string): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    packsAPI.deletePack(id)\n        .then(() => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(getPacksTC())\n            console.log('pack deleted successfully')\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC('failed'))\n            console.log('delete pack error')\n        })\n}\n\nexport const updatePackTC = (packId: string, newPackName: string): AppThunkType => (dispatch) => {\n    dispatch(setAppStatusAC('loading'))\n    packsAPI.updatePack(packId, newPackName)\n        .then(() => {\n            dispatch(getPacksTC())\n            console.log('pack updated successfully')\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC('failed'))\n            console.log('update pack error')\n        })\n}\n\n//types\nexport type PacksActionsType = ReturnType<typeof setPacksAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setTotalPacksCountAC>\n    | ReturnType<typeof setCurrentPageAC>\n    | ReturnType<typeof delPackAC>\n    | ReturnType<typeof updatePackAC>\n    | ReturnType<typeof setUserIdAC>\n    | ReturnType<typeof setMinCardsCountAC>\n    | ReturnType<typeof setMaxCardsCountAC>\n    | ReturnType<typeof setNameAC>\n    | ReturnType<typeof setSortPacksAC>\n\nexport type GetPacksRequestDataType = {\n    packName?: string\n    min?: number\n    max?: number\n    sortPacks?: number\n    page?: number\n    pageCount?: string\n    user_id?: string\n}\n\nexport type PackResponseType = {\n    \"_id\": string,\n    \"user_id\": string,\n    \"user_name\": string,\n    \"private\": boolean,\n    \"name\": string,\n    \"path\": string,\n    \"grade\": number,\n    \"shots\": number,\n    \"cardsCount\": number,\n    \"type\": string,\n    \"rating\": number,\n    \"created\": string,\n    \"updated\": string,\n    \"more_id\": string,\n    \"__v\": number,\n}\n\nexport type UpdatePacksRequestDataType = {\n    _id: string\n    name?: string\n    private?: boolean\n}\n","import React, {ChangeEvent, useState} from 'react';\nimport SuperInputText from '../../../superComponents/c1-SuperInputText/SuperInputText';\nimport SuperButton from '../../../superComponents/c2-SuperButton/SuperButton';\nimport s from '../Modal.module.css';\n\ntype ModalForPacksPropsType = {\n  closeAddEditPackModal: () => void\n  addNewPack: (name: string) => void\n  titlePack?: string\n  placeholder?: string\n}\n\nexport const ModalForPacks = (props: ModalForPacksPropsType) => {\n  const [newText, setNewText] = useState(props.titlePack ?? '')\n\n  const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewText(e.currentTarget.value)\n  }\n\n  const onClickHandler = () => {\n    props.addNewPack(newText)\n    props.closeAddEditPackModal()\n  }\n\n  const onClosedClick = () => {\n    props.closeAddEditPackModal()\n  }\n\n  return (\n    <>\n      <div className={s.wrapperModal} onClick={props.closeAddEditPackModal}>\n        <div className={s.modal} onClick={e => e.stopPropagation()}>\n          <h3>Enter new pack name</h3>\n          <form>\n            <SuperInputText\n              type='text'\n              placeholder={props.placeholder}\n              value={newText}\n              onChange={inputChangeHandler}\n            />\n            <div className={s.buttonBlock}>\n              <SuperButton type='submit' onClick={onClickHandler}>Ok</SuperButton>\n              <SuperButton onClick={onClosedClick}>Cancel</SuperButton>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}","import s from '../Modal.module.css';\nimport React from \"react\";\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\n\ntype ModalDeletePropsType = {\n    closeDeleteModal: () => void\n    deleteItem: () => void\n    title: string\n}\n\nexport const ModalDeleteItem = (props: ModalDeletePropsType) => {\n\n    const onClickHandler = () => {\n        props.deleteItem()\n        props.closeDeleteModal()\n    }\n\n    const onClosedClick = () => {\n        props.closeDeleteModal()\n    }\n\n    return (\n        <>\n            <div className={s.wrapperModal} onClick={props.closeDeleteModal}>\n                <div className={s.modal} onClick={e => e.stopPropagation()}>\n                    <h3 style={{color: 'darkred'}}>{props.title}</h3>\n                    <form>\n                        <div className={s.buttonBlock}>\n                            <SuperButton type='submit' onClick={onClickHandler}>Ok</SuperButton>\n                            <SuperButton onClick={onClosedClick}>Cancel</SuperButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </>\n    )\n}","import {Tooltip, withStyles} from \"@material-ui/core\";\n\nexport const LightTooltip = withStyles((theme) => ({\n    tooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 13,\n    },\n}))(Tooltip);","import React, {useState} from \"react\";\nimport s from './Pack.module.css'\nimport {PackResponseType} from \"../../../../m2-bll/packs-reducer\";\nimport {NavLink} from \"react-router-dom\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {green} from \"@material-ui/core/colors\";\nimport {ModalForPacks} from \"../../Modal/ModalPacks/ModalForPacks\";\nimport {ModalDeleteItem} from \"../../Modal/ModalDelete/ModalDeleteItem\";\nimport SchoolIcon from '@material-ui/icons/School';\nimport {LightTooltip} from \"../../../common/LightToolTip\";\n\nexport const Pack: React.FC<PackPropsType> = React.memo((props) => {\n\n    const updateTime = new Date(props.updated).toLocaleDateString(['ban', 'id'])\n\n    const delPack = () => {\n        props.delPack(props._id)\n    }\n    const updatePack = (newPackName: string) => {\n        props.updatePack(props._id, newPackName)\n    }\n\n\n    // Update pack modal\n    const [editPackModal, setEditPackModal] = useState<boolean>(false);\n    const openAddEditPackModal = () => {\n        setEditPackModal(true)\n    }\n    const closeAddEditPackModal = () => {\n        setEditPackModal(false)\n    }\n\n    // Delete pack modal\n    const [deletePackModal, setDeletePackModal] = useState<boolean>(false);\n    const openDeletePackModal = () => {\n        setDeletePackModal(true)\n    }\n    const closeDeletePackModal = () => {\n        setDeletePackModal(false)\n    }\n\n    // ОнКлик на кнопку Edit\n    // const updatePack = () => {\n    //   props.updatePacks(props.updatePacks.cardsPack)\n    // }\n    return (\n        <div className={s.packItem}>\n            <div className={s.packSpecification}>{props.user_name}</div>\n            <div className={s.packSpecification}>{props.name}</div>\n            <div className={s.packSpecification}>{props.cardsCount}</div>\n            <div className={s.packSpecification}>{updateTime}</div>\n            <div className={s.packSpecification}>\n                <NavLink to={`/cards/${props._id}`} className={s.cardsLink}>cards</NavLink></div>\n            <div className={s.packSpecification}>\n                <NavLink to={`/learn/${props._id}`}>\n                    <LightTooltip title='Learn'>\n                        <span  style={{cursor: 'pointer'}}><SchoolIcon/></span>\n                    </LightTooltip>\n                </NavLink>\n            </div>\n\n            <div className={s.packSpecification}>\n                {props.user_id === props.currentUserId\n                    ? <LightTooltip title='Edit pack'><span style={{cursor: 'pointer'}}>\n                        <EditIcon onClick={openAddEditPackModal} style={{color: green[500]}}/></span>\n                    </LightTooltip> : ''}\n            </div>\n            <div className={s.packSpecification}>\n                {props.user_id === props.currentUserId\n                    ? <LightTooltip title='Delete pack'><span style={{cursor: 'pointer'}}>\n                        <DeleteIcon onClick={openDeletePackModal} color='secondary'/></span>\n                    </LightTooltip> : ''}\n            </div>\n\n            {editPackModal && <ModalForPacks\n                closeAddEditPackModal={closeAddEditPackModal}\n                addNewPack={updatePack}\n                titlePack={props.name}\n            />}\n\n            {deletePackModal && <ModalDeleteItem\n                closeDeleteModal={closeDeletePackModal}\n                deleteItem={delPack}\n                title={`Are you sure you want to delete pack '${props.name}'?`}\n            />}\n\n        </div>\n    )\n})\n\n//types\ntype PackPropsType = PackResponseType &\n    {\n        updatePack: (packId: string, newPackName: string) => void\n        delPack: (id: string) => void\n        currentUserId: string\n    }","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Pagination} from '@material-ui/lab';\nimport {\n    addPackTC,\n    delPackTC,\n    getPacksTC,\n    setCurrentPageAC,\n    setMaxCardsCountAC,\n    setMinCardsCountAC, setNameAC, setSortPacksAC,\n    setUserIdAC,\n    updatePackTC\n} from \"../../../m2-bll/packs-reducer\";\nimport {Pack} from \"./Pack/Pack\";\nimport {AppStoreType} from \"../../../m2-bll/store\";\nimport st from './Packs.module.css'\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\nimport {Login} from \"../Login/Login\";\nimport {ModalForPacks} from \"../Modal/ModalPacks/ModalForPacks\";\nimport {Slider} from \"@material-ui/core\";\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nexport const Packs: React.FC = React.memo(() => {\n\n    const dispatch = useDispatch()\n    const {cardPacks, totalPacksCount, pageSize, currentPage, minCardsCount, maxCardsCount, sortPacks, userId}\n        = useSelector((state: AppStoreType) => state.packs)\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\n    const _id = useSelector((state: AppStoreType) => state.auth.userData._id)\n    const [searchText, setSearchText] = useState('')\n\n    useEffect(() => {\n        dispatch(getPacksTC())\n    }, [dispatch, minCardsCount, maxCardsCount])\n\n    // add pack modal\n    const [addPackModal, setAddPackModal] = useState<boolean>(false);\n    const openAddEditPackModal = () => {\n        setAddPackModal(true)\n    }\n    const closeAddEditPackModal = () => {\n        setAddPackModal(false)\n    }\n\n    //add/del/update packs\n    const addPack = (newPackName: string) => {\n        dispatch(addPackTC({name: newPackName}))\n    }\n    const delPack = useCallback(function (id: string) {\n        dispatch(delPackTC(id))\n    }, [dispatch])\n    const updatePack = useCallback(function (packId: string, newPackName: string) {\n        dispatch(updatePackTC(packId, newPackName))\n    }, [dispatch])\n\n    //sort\n    const sortByLastUpdate = () => {\n        dispatch(setSortPacksAC('0updated'))\n        dispatch(getPacksTC())\n    }\n    const sortByFirstUpdate = () => {\n        dispatch(setSortPacksAC('1updated'))\n        dispatch(getPacksTC())\n    }\n    const sortPacksByUpdate = sortPacks === '1updated'\n        ? <span style={{cursor: 'pointer'}}><ArrowDownwardIcon onClick={sortByLastUpdate} color='primary'/></span>\n        : <span style={{cursor: 'pointer'}}><ArrowUpwardIcon onClick={sortByFirstUpdate} color='primary'/></span>\n\n    //my/all packs\n    const [myPacks, setMyPacks] = useState(userId === _id)\n    const activeMyPacksButton = myPacks ? `${st.activeButton}` : ''\n    const activeAllPacksButton = !myPacks ? `${st.activeButton}` : ''\n    const showMyPacks = () => {\n        dispatch(setUserIdAC(_id))\n        dispatch(getPacksTC())\n        setMyPacks(true)\n    }\n    const showAllPacks = () => {\n        dispatch(setUserIdAC(''))\n        dispatch(getPacksTC())\n        setMyPacks(false)\n    }\n\n    //onChangeSlider\n    const onChangeSlider = (event: ChangeEvent<{}>, newValue: number | number[]) => {\n        if (newValue instanceof Array) {\n            dispatch(setMinCardsCountAC(newValue[0]))\n            dispatch(setMaxCardsCountAC(newValue[1]))\n        }\n    }\n\n    //search\n    const onSearchChangeHandler = (value: string) => setSearchText(value)\n    const search = () => {\n        dispatch(setNameAC(searchText))\n        dispatch(getPacksTC())\n        setSearchText('')\n        dispatch(setNameAC(''))\n    }\n\n    //pagination\n    let pages = []\n    let pagesCount = Math.ceil(totalPacksCount / pageSize)\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\n    const onPageChangedHandler = (p: number) => {\n        dispatch(setCurrentPageAC(p))\n        dispatch(getPacksTC())\n    }\n\n    //list of packs\n    const mappedPacks = cardPacks && cardPacks.map((p, i) => <Pack\n        key={i}\n        {...p}\n        delPack={delPack}\n        updatePack={updatePack}\n        currentUserId={_id}\n    />)\n\n    if (!isLoggedIn) {\n        return <Login/>\n    }\n\n    return (\n        <div>\n            <div className={st.title}>\n                <h1>Packs</h1>\n            </div>\n            <div className={st.packsContainer}>\n                <div className={st.packsField}>\n                    <div className={st.packContents}>\n                        <div>username</div>\n                        <div>name</div>\n                        <div>count</div>\n                        <div>{sortPacksByUpdate}</div>\n                        <div>update</div>\n                        <div>\n                            <SuperButton onClick={openAddEditPackModal}>add</SuperButton>\n                        </div>\n                    </div>\n                    <div>\n                        {mappedPacks}\n                    </div>\n                </div>\n\n                {addPackModal && <ModalForPacks\n                    closeAddEditPackModal={closeAddEditPackModal}\n                    addNewPack={addPack}\n                    placeholder='new pack name'\n                />}\n\n                <div className={st.sidebar}>\n\n                    <div className={st.showMyAllPacks}>\n                        <span className={activeMyPacksButton}>\n                        <SuperButton onClick={showMyPacks}> my packs </SuperButton> </span>\n\n                        <span className={activeAllPacksButton}>\n                        <SuperButton onClick={showAllPacks}> all packs </SuperButton> </span>\n                    </div>\n\n                    <div className={st.filterByCardsCount}>\n                        <Slider\n                            style={{margin: '0', padding: '0'}}\n                            value={[minCardsCount, maxCardsCount]}\n                            onChangeCommitted={onChangeSlider}\n                            valueLabelDisplay=\"auto\"\n                            aria-labelledby=\"range-slider\"\n                            name='cards count'\n                            min={0}\n                            max={20}\n                        />\n                    </div>\n\n                    <div className={st.search}>\n                        <SuperInputText\n                            onChangeText={onSearchChangeHandler}\n                            onEnter={search}\n                            placeholder='search packs'\n                            value={searchText}/>\n                        <SearchIcon onClick={search}/>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <div className={st.paginator}>\n                <Pagination count={pagesCount}\n                            boundaryCount={1}\n                            defaultPage={1}\n                            page={currentPage}\n                            onChange={(e: ChangeEvent<any>, p: number) => onPageChangedHandler(p)}/>\n            </div>\n        </div>\n    )\n})","import React, {ChangeEvent, useState} from 'react';\nimport SuperInputText from '../../../superComponents/c1-SuperInputText/SuperInputText';\nimport s from '../Modal.module.css';\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\n\ntype ModalForCardsPropsType = {\n  closeAddEditCardModal: () => void\n  addNewCard: (question: string, answer: string) => void\n  title?: string\n  questionPlaceholder?: string\n  answerPlaceholder?: string\n  questionValue?: string\n  answerValue?: string\n}\n\nexport const ModalForCards = (props: ModalForCardsPropsType) => {\n  const [question, setQuestion] = useState(props.questionValue ?? '')\n  const [answer, addQuestion] = useState(props.answerValue ?? '')\n\n  const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.currentTarget.value)\n  }\n\n  const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\n    addQuestion(e.currentTarget.value)\n  }\n\n  const onClickHandler = () => {\n    props.addNewCard(question, answer)\n    props.closeAddEditCardModal()\n  }\n\n  const onClosedClick = () => {\n    props.closeAddEditCardModal()\n  }\n\n  return (\n    <>\n      <div className={s.wrapperModal} onClick={props.closeAddEditCardModal}>\n        <div className={s.modal} onClick={e => e.stopPropagation()}>\n          <h3>{props.title}</h3>\n          <form>\n            <SuperInputText\n              type='text'\n              placeholder={props.questionPlaceholder}\n              value={question}\n              onChange={inputChangeHandlerQuestion}\n            />\n            <SuperInputText\n              type='text'\n              placeholder={props.answerPlaceholder}\n              value={answer}\n              onChange={inputChangeHandlerAnswer}\n            />\n            <div className={s.buttonBlock}>\n              <SuperButton type='submit' onClick={onClickHandler}>Ok</SuperButton>\n              <SuperButton onClick={onClosedClick}>Cancel</SuperButton>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}","import React, {useState} from \"react\";\nimport s from './Card.module.css'\nimport {CardDataType} from \"../../../../m2-bll/cards-reducer\";\nimport {updateCardDataType} from \"../../../../m3-dal/api\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport {green} from \"@material-ui/core/colors\";\nimport {Delete} from '@material-ui/icons';\nimport {ModalForCards} from \"../../Modal/ModalCards/ModalForCards\";\nimport {ModalDeleteItem} from \"../../Modal/ModalDelete/ModalDeleteItem\";\nimport {LightTooltip} from \"../../../common/LightToolTip\";\n\ntype CardPropsType = CardDataType & {\n    delCard: (id: string, packId: string) => void\n    updateCard: (updateCard: updateCardDataType) => void\n    packId: string\n    currentUserId: string\n}\n\nexport const Card = (props: CardPropsType) => {\n\n\n    const deleteCardHandler = () => props._id && props.delCard(props._id, props.packId)\n    const updateCardHandler = (question: string, answer: string) =>\n        props.updateCard({_id: props._id, question, answer})\n\n    const update = new Date(props.updated).toLocaleDateString(['ban', 'id']);\n\n    // Update card modal\n    const [editCardModal, setEditCardsModal] = useState<boolean>(false);\n    const openAddEditCardModal = () => {\n        setEditCardsModal(true)\n    }\n    const closeAddEditCardModal = () => {\n        setEditCardsModal(false)\n    }\n\n    // Delete pack modal\n    const [deleteCardModal, setDeleteCardModal] = useState<boolean>(false);\n    const openDeleteCardModal = () => {\n        setDeleteCardModal(true)\n    }\n    const closeDeleteCardModal = () => {\n        setDeleteCardModal(false)\n    }\n\n    return (\n        <div className={s.cardItem}>\n            <div className={s.cardSpecification}>{props.question}</div>\n            <div className={s.cardSpecification}>{props.answer}</div>\n            <div className={s.cardSpecification}>{props.grade}</div>\n            <div className={s.cardSpecification}>{update}</div>\n            <div className={s.cardSpecification}>\n                {props.user_id === props.currentUserId\n                    ? <LightTooltip title='Edit card'><span style={{cursor: 'pointer'}}>\n                        <EditIcon onClick={openAddEditCardModal} style={{color: green[500]}}/></span>\n                    </LightTooltip> : ''}\n            </div>\n            <div className={s.cardSpecification}>\n                {props.user_id === props.currentUserId\n                    ? <LightTooltip title='Delete card'><span style={{cursor: 'pointer'}}>\n                        <Delete onClick={openDeleteCardModal} color='secondary'/></span>\n                    </LightTooltip> : ''}\n            </div>\n\n            {editCardModal && <ModalForCards\n                addNewCard={updateCardHandler}\n                closeAddEditCardModal={closeAddEditCardModal}\n                title='Edit your card'\n                questionValue={props.question}\n                answerValue={props.answer}\n\n            />}\n\n            {deleteCardModal && <ModalDeleteItem\n                closeDeleteModal={closeDeleteCardModal}\n                deleteItem={deleteCardHandler}\n                title={`Are you sure you want to delete card '${props.question}'?`}\n            />}\n\n        </div>\n    )\n\n}\n","import {setAppStatusAC} from \"./app-reducer\";\nimport {cardsAPI, CreateCardRequestDataType, updateCardDataType} from \"../m3-dal/api\";\nimport {AppThunkType} from \"./store\";\n\nconst initialState = {\n    cards: [] as Array<CardDataType>,\n    packUserId: '',\n    page: 1,\n    pageCount: 5,\n    cardsTotalCount: 0,\n    minGrade: 0,\n    maxGrade: 6,\n    sortCards: '0grade' as SortCardsOptions,\n}\n\ntype SortCardsOptions = '0grade' | '1grade'\n\ntype InitialStateType = typeof initialState\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"CARDS/SET-CARDS\":\n            return {...state, cards: action.cards}\n        case \"CARDS/SET_CARDS_TOTAL_COUNT\":\n            return {...state, cardsTotalCount: action.totalCards}\n        case \"CARDS/SET_CURRENT_PAGE\":\n            return {...state, page: action.page}\n        case \"CARDS/SET-SORT\":\n            return {...state, sortCards: action.sortValue}\n        case \"CARDS/SET-PAGE-COUNT\":\n            return {...state, pageCount: action.pageCount}\n        default:\n            return state\n    }\n}\n\n//action creators\nexport const setCardsAC = (cards: CardDataType[]) => ({type: 'CARDS/SET-CARDS', cards} as const)\nexport const setCardsTotalCountAC = (totalCards: number) => ({type: 'CARDS/SET_CARDS_TOTAL_COUNT', totalCards} as const)\nexport const setCardsCurrentPageAC = (page: number) => ({type: 'CARDS/SET_CURRENT_PAGE', page} as const)\nexport const setSortCardsAC = (sortValue: SortCardsOptions) => ({type: 'CARDS/SET-SORT', sortValue} as const)\nexport const setPageCountAC = (pageCount: number) => ({type: 'CARDS/SET-PAGE-COUNT', pageCount} as const)\n\n\n//thunk\nexport const getCardsTC = (cardsPack_id: string): AppThunkType => (dispatch, getState) => {\n    dispatch(setAppStatusAC('loading'))\n    const state = getState()\n    const page = state.cards.page\n    const pageCount = state.cards.pageCount\n    const sortCards = state.cards.sortCards\n    cardsAPI.getCards(cardsPack_id, page, pageCount, sortCards)\n        .then(res => {\n            dispatch(setCardsTotalCountAC(res.data.cardsTotalCount))\n            dispatch(setCardsAC(res.data.cards))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC('failed'))\n            console.log('get cards error')\n        })\n}\n\nexport const addCardTC = (data: CreateCardRequestDataType): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    cardsAPI.addCard(data)\n        .then(() => {\n            dispatch(getCardsTC(data.cardsPack_id))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch(e => {\n            const error = e.res ? e.res.data.error : (`Add card failed: ${e.message}.`)\n            dispatch(setAppStatusAC('failed'))\n            alert(error)\n        })\n}\n\nexport const delCardTC = (id: string, packId: string): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    cardsAPI.deleteCard(id)\n        .then(() => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(getCardsTC(packId))\n            console.log('card deleted successfully')\n        })\n        .catch(() => {\n            dispatch(setAppStatusAC('failed'))\n            console.log('delete card error')\n        })\n}\n\nexport const updateCardTC = (packId: string, updateCardData: updateCardDataType): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    cardsAPI.updateCard(updateCardData)\n        .then(() => {\n            dispatch(getCardsTC(packId))\n        })\n        .catch(err => {\n            const error = err.response\n                ? err.response.data.error\n                : (err.message + ' , error')\n            dispatch(setAppStatusAC('failed'))\n            alert(error)\n        })\n}\n\nexport const sendGradeTC = (cardId: string, grade: number): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    cardsAPI.sendGrade(cardId, grade)\n        .then(() => {\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch(err => {\n            const error = err.response\n                ? err.response.data.error\n                : (err.message + ' , error')\n            dispatch(setAppStatusAC('failed'))\n            alert(error)\n        })\n}\n\n//types\nexport type CardsActionsType = ReturnType<typeof setCardsAC>\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setCardsTotalCountAC>\n    | ReturnType<typeof setCardsCurrentPageAC>\n    | ReturnType<typeof setSortCardsAC>\n    | ReturnType<typeof setPageCountAC>\n\n// export type GetCardsRequestDataType = {\n//     cardAnswer?: string\n//     cardQuestion?: string\n//     cardsPack_id: string\n//     min?: number\n//     max?: number\n//     sortCards?: number\n//     page?: number\n//     pageCount?: number\n// }\n\nexport type CardDataType = {\n    cardsPack_id: string\n    answer: string\n    comments?: string\n    created?: string\n    grade?: number\n    more_id?: string\n    question: string\n    questionImg?: string\n    rating?: number\n    shots?: number\n    type?: string\n    updated: string\n    user_id?: string\n    __v?: number\n    _id: string\n}","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\"\nimport st from \"./Cards.module.css\"\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\nimport {Card} from \"./Card/Card\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/store\";\nimport {\n    addCardTC,\n    delCardTC,\n    getCardsTC,\n    setCardsCurrentPageAC,\n    setSortCardsAC,\n    updateCardTC\n} from \"../../../m2-bll/cards-reducer\";\nimport {useParams} from \"react-router-dom\";\nimport {Login} from \"../Login/Login\";\nimport {updateCardDataType} from \"../../../m3-dal/api\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport {Pagination} from \"@material-ui/lab\";\nimport {ModalForCards} from \"../Modal/ModalCards/ModalForCards\";\n\n\n\nexport const Cards = () => {\n\n    const dispatch = useDispatch()\n    const {cards, cardsTotalCount, pageCount, sortCards, page} = useSelector((state: AppStoreType) => state.cards)\n    const {packID} = useParams<{ packID: string }>()\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\n    const _id = useSelector((state: AppStoreType) => state.auth.userData._id)\n    const packUserId = useSelector((state: AppStoreType) => state.packs.userId)\n\n    useEffect(() => {\n        dispatch(getCardsTC(packID))\n    }, [dispatch, packID])\n\n    // Add card modal\n    const [addCardModal, setAddCardsModal] = useState<boolean>(false);\n    const openAddEditCardModal = () => {\n        setAddCardsModal(true)\n    }\n    const closeAddEditCardModal = () => {\n        setAddCardsModal(false)\n    }\n\n    //add/del/update card\n    const addCardHandler = (question: string, answer: string) => {\n        dispatch(addCardTC({cardsPack_id: packID, question: question, answer: answer}))\n    }\n    const delCard = useCallback((id: string, packId: string) => {\n        dispatch(delCardTC(id, packId))\n    }, [dispatch])\n    const updateCard = useCallback((updateCardData: updateCardDataType) => {\n        dispatch(updateCardTC(packID, updateCardData))\n    }, [dispatch])\n\n    //pagination\n    let pages = []\n    let pagesCount = Math.ceil(cardsTotalCount / pageCount)\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\n    const onPageChangedHandler = (p: number) => {\n        dispatch(setCardsCurrentPageAC(p))\n        dispatch(getCardsTC(packID))\n    }\n\n    //sort\n    const sortByGradeUp = () => {\n        dispatch(setSortCardsAC('0grade'))\n        dispatch(getCardsTC(packID))\n    }\n    const sortByGradeDown = () => {\n        dispatch(setSortCardsAC('1grade'))\n        dispatch(getCardsTC(packID))\n    }\n    const sortCardsByGrade = sortCards === '0grade'\n        ? <span style={{cursor: 'pointer'}}><ArrowDownwardIcon onClick={sortByGradeDown} color='primary' /></span>\n        : <span style={{cursor: 'pointer'}}><ArrowUpwardIcon onClick={sortByGradeUp} color='primary' /></span>\n\n    //cards list\n    const mappedCards = cards && cards.map((c, i) => <Card\n        key={i}\n        {...c}\n        packId={packID}\n        delCard={delCard}\n        updateCard={updateCard}\n        currentUserId={_id}\n    />)\n\n    if (!isLoggedIn) {\n        return <Login/>\n    }\n\n    return (\n        <div>\n            <div>\n                <h1>Cards</h1>\n            </div>\n            {addCardModal && <ModalForCards\n                addNewCard={addCardHandler}\n                closeAddEditCardModal={closeAddEditCardModal}\n                questionPlaceholder='question'\n                answerPlaceholder='answer'\n            />}\n            <div className={st.cardContents}>\n                <div>question</div>\n                <div>answer</div>\n                <div>{sortCardsByGrade}</div>\n                <div>grade</div>\n                <div>last update</div>\n                <div>\n                    {_id === packUserId ? <SuperButton onClick={openAddEditCardModal}>add</SuperButton> : ''}\n                </div>\n            </div>\n            {mappedCards}\n            <div className={st.paginator}>\n                <Pagination\n                    count={pagesCount}\n                    boundaryCount={1}\n                    defaultPage={1}\n                    page={page}\n                    onChange={(e: ChangeEvent<any>, p: number) => onPageChangedHandler(p)}\n                />\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from './Loader.module.css';\n\nexport const Loader = () => {\n    return <div className={s.ldsCircle}>\n        <div></div>\n    </div>\n}","import React, {useEffect, useState} from \"react\";\nimport {NavLink, useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"../../../m2-bll/store\";\nimport {RequestStatusType} from \"../../../m2-bll/app-reducer\";\nimport {CardDataType, getCardsTC, sendGradeTC, setPageCountAC} from \"../../../m2-bll/cards-reducer\";\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\nimport {Loader} from \"../../superComponents/Loader/Loader\";\nimport {Button, ButtonGroup} from \"@material-ui/core\";\nimport s from './Learn.module.css'\n\nexport const Learn = () => {\n    const {packID} = useParams<{ packID: string }>()\n    const dispatch = useDispatch()\n\n    const cards = useSelector<AppStoreType, Array<CardDataType>>((state) => state.cards.cards)\n    const status = useSelector<AppStoreType, RequestStatusType>((state) => state.app.status)\n\n    const grades = ['no idea', 'forgot', 'it took me a while', 'confused a little', 'I knew'];\n\n    const [currentQuestion, setQuestion] = useState(0)\n    const [answer, setAnswer] = useState(false)\n    const [stop, setStop] = useState(false)\n    const [grade, setGrade] = useState(0)\n\n    useEffect(() => {\n        dispatch(setPageCountAC(1000))\n        dispatch(getCardsTC(packID))\n        dispatch(setPageCountAC(5))\n    }, [dispatch, packID])\n\n    const nextQuestion = () => {\n        if (cards.length !== currentQuestion + 1) {\n            setQuestion(currentQuestion + 1)\n        } else {\n            setStop(true)\n        }\n        grade > 0 && dispatch(sendGradeTC(cards[currentQuestion]._id, grade))\n        setAnswer(false)\n        setGrade(0)\n    }\n\n    const setAnswerHandler = () => {\n        setAnswer(true)\n    }\n\n    const rollbackHandler = () => {\n        setQuestion(0)\n        setStop(false)\n    }\n\n    return (\n        <div>\n            {status === 'loading' && <Loader/>}\n            <div className={s.goToPacks}>\n                <NavLink\n                    to={'/packs'}>\n                    🔙 back to Packs\n                </NavLink>\n            </div>\n            {\n                cards.length === 0\n                    ? <div>\n                        <span>There are no cards in this pack...</span>\n                    </div>\n                    : <div>\n                        {stop\n                            ? <div className={s.startOver}>\n                                <div className={s.qOver}>The questions are over:)</div>\n                                <SuperButton onClick={rollbackHandler}>Start over</SuperButton>\n                            </div>\n                            : <>\n                                <div className={s.question}>\n                                    Question: {cards[currentQuestion].question}\n                                </div>\n                                <SuperButton onClick={setAnswerHandler} disabled={answer}>CHECK</SuperButton>\n                                {\n                                    answer && (\n                                        <div>\n                                            <div className={s.answer}>Answer: {cards[currentQuestion].answer}</div>\n                                            <div className={s.options}>\n                                                {grades.map((el, i) => {\n                                                    const settingGrades = () => {\n                                                        setGrade(i + 1)\n                                                    }\n                                                    return (\n\n                                                        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n\n\n                                                        <Button\n                                                            key={i + 1}\n                                                            onClick={settingGrades}\n                                                            disabled={i + 1 === grade}\n                                                        >\n                                                            {el}\n                                                        </Button>\n                                                        </ButtonGroup>\n                                                    )\n                                                })}\n                                            </div>\n                                            <SuperButton onClick={nextQuestion}>NEXT</SuperButton>\n                                        </div>\n                                    )\n                                }\n                            </>\n                        }\n                    </div>\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {Error404} from \"../components/Error404\";\nimport {Login} from \"../components/Login/Login\";\nimport {Profile} from \"../components/Profile/Profile\";\nimport {Register} from \"../components/Registration/Register\";\nimport {NewPassword} from \"../components/NewPassword\";\nimport {ForgotPassword} from \"../components/ForgotPassword\";\n\nimport {Packs} from \"../components/Packs/Packs\";\nimport {Cards} from \"../components/Cards/Cards\";\nimport {Learn} from \"../components/Learn/Learn\";\n\n\nexport const PATH = {\n    LOGIN: '/login',\n    REGISTER: '/register',\n    PROFILE: '/profile',\n    FORGOT_PASSWORD: '/forgot-password',\n    NEW_PASSWORD: '/new-password',\n    PACKS: '/packs',\n    CARDS: '/cards/:packID',\n    LEARN: '/learn/:packID',\n}\n\nexport const Routes = () => {\n    return (\n        <div>\n            {/*Switch выбирает первый подходящий роут*/}\n            <Switch>\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\n                <Route path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\n                <Route path={PATH.NEW_PASSWORD + '/:token?'} render={() => <NewPassword/>}/>\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\n                <Route path={PATH.LEARN} render={() => <Learn/>}/>\n\n                <Route render={() => <Error404/>}/>\n            </Switch>\n        </div>\n    )\n}","import React from \"react\";\nimport s from './Header.module.css'\nimport { NavLink } from \"react-router-dom\";\nimport {PATH} from \"../routes/Routes\";\nimport {useDispatch} from \"react-redux\";\nimport {logoutTC} from \"../../m2-bll/auth-reducer\";\nimport {ExitToApp} from \"@material-ui/icons\";\nimport {LightTooltip} from \"../common/LightToolTip\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            <div className={s.wrapper}>\n                <NavLink to={PATH.PROFILE} className={s.link} activeClassName={s.active}>Profile</NavLink>\n                <NavLink to={PATH.PACKS} className={s.link} activeClassName={s.active}>Packs</NavLink>\n                <LightTooltip title='Logout' >\n                    <span style={{cursor: 'pointer'}}>\n                        <ExitToApp style={{paddingLeft: '50px'}} onClick={() => dispatch(logoutTC)} />\n                    </span>\n                </LightTooltip>\n            </div>\n        </div>\n    )\n}","import React, {useEffect} from \"react\";\nimport {Header} from \"./m1-ui/header/Header\";\nimport {Routes} from \"./m1-ui/routes/Routes\";\nimport {HashRouter} from \"react-router-dom\";\nimport {AppStoreType} from \"./m2-bll/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setIsInitializedTC} from \"./m2-bll/app-reducer\";\nimport {Loader} from \"./m1-ui/superComponents/Loader/Loader\";\n\nexport const Main = () => {\n\n    const isInitialized = useSelector<AppStoreType, boolean>(state => state.app.isInitialized)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(setIsInitializedTC())\n    }, [dispatch])\n\n    if(!isInitialized){\n        return <Loader />\n    }\n\n    return (\n        <>\n            <HashRouter>\n                <Header/>\n                <Routes/>\n            </HashRouter>\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Main} from \"./n1-main/Main\";\nimport {useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./n1-main/m2-bll/store\";\nimport {RequestStatusType} from \"./n1-main/m2-bll/app-reducer\";\nimport {Loader} from \"./n1-main/m1-ui/superComponents/Loader/Loader\";\n\nconst App = () => {\n    const status = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\n\n  return (\n    <div className=\"App\">\n        {status === 'loading' && <Loader />}\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {registerReducer} from \"./registration-reducer\";\nimport {AppActionsType, appReducer} from \"./app-reducer\";\nimport {recoverPasswordReducer} from \"./recoverPassword-reducer\";\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\nimport {PacksActionsType, packsReducer} from \"./packs-reducer\";\nimport {CardsActionsType, cardsReducer} from \"./cards-reducer\";\n\nconst reducers = combineReducers({\n    auth: authReducer,\n    register: registerReducer,\n    app: appReducer,\n    forgotPassword: recoverPasswordReducer,\n    setNewPassword: setNewPasswordReducer,\n    packs: packsReducer,\n    cards: cardsReducer,\n});\nexport type AppActions = PacksActionsType | CardsActionsType | AppActionsType\nexport type AppThunkType<ReturnType= void> = ThunkAction<ReturnType, AppStoreType, unknown, AppActions>\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store\n\nexport type AppStoreType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store; // for dev\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperModal\":\"Modal_wrapperModal__1AtsH\",\"modal\":\"Modal_modal__3ubGQ\",\"buttonBlock\":\"Modal_buttonBlock__13gFD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packContents\":\"Packs_packContents__1gnB5\",\"packsContainer\":\"Packs_packsContainer__2tB3f\",\"packsField\":\"Packs_packsField__3IGWt\",\"sidebar\":\"Packs_sidebar__13oXD\",\"title\":\"Packs_title__33T0y\",\"showMyAllPacks\":\"Packs_showMyAllPacks__3XTT-\",\"filterByCardsCount\":\"Packs_filterByCardsCount__vvBC4\",\"paginator\":\"Packs_paginator___tyal\",\"filter\":\"Packs_filter__JOPGr\",\"activeButton\":\"Packs_activeButton__1kNsd\",\"search\":\"Packs_search__1x74N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"styles_bgr__1vz1r\",\"form\":\"styles_form__28ypd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packItem\":\"Pack_packItem__2ShEZ\",\"packSpecification\":\"Pack_packSpecification__3N_EC\",\"cardsLink\":\"Pack_cardsLink__1TPmv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardItem\":\"Card_cardItem__3qhBa\",\"cardSpecification\":\"Card_cardSpecification__2ruLa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Learn_options__2LoVV\",\"question\":\"Learn_question__1KJZL\",\"answer\":\"Learn_answer__xw_L0\",\"qOver\":\"Learn_qOver__145dG\",\"startOver\":\"Learn_startOver__3eDw9\",\"goToPacks\":\"Learn_goToPacks__eFnc1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__1uzhM\",\"link\":\"Header_link__2eoyP\",\"active\":\"Header_active__6vvlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__38k4m\",\"errorInput\":\"SuperInputText_errorInput__2_4_m\",\"error\":\"SuperInputText_error__14AGh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2W1BO\",\"red\":\"SuperButton_red__1HL_2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__eqHiW\",\"spanClassName\":\"SuperCheckbox_spanClassName__3A4zY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authError\":\"Login_authError__34H0h\",\"free\":\"Login_free__2qjJ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContents\":\"Cards_cardContents__GpAHE\",\"paginator\":\"Cards_paginator__jY83L\"};"],"sourceRoot":""}